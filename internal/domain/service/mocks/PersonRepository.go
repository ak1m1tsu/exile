// Code generated by mockery v2.20.2. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "github.com/insan1a/exile/internal/domain/entity"
	mock "github.com/stretchr/testify/mock"
)

// PersonRepository is an autogenerated mock type for the PersonRepository type
type PersonRepository struct {
	mock.Mock
}

// Delete provides a mock function with given fields: _a0, _a1
func (_m *PersonRepository) Delete(_a0 context.Context, _a1 string) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindByID provides a mock function with given fields: _a0, _a1
func (_m *PersonRepository) FindByID(_a0 context.Context, _a1 string) (entity.PersonModel, error) {
	ret := _m.Called(_a0, _a1)

	var r0 entity.PersonModel
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (entity.PersonModel, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) entity.PersonModel); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(entity.PersonModel)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindMany provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *PersonRepository) FindMany(_a0 context.Context, _a1 int, _a2 int, _a3 entity.PersonModel) ([]entity.PersonModel, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	var r0 []entity.PersonModel
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int, entity.PersonModel) ([]entity.PersonModel, error)); ok {
		return rf(_a0, _a1, _a2, _a3)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, int, entity.PersonModel) []entity.PersonModel); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.PersonModel)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, int, entity.PersonModel) error); ok {
		r1 = rf(_a0, _a1, _a2, _a3)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store provides a mock function with given fields: _a0, _a1
func (_m *PersonRepository) Store(_a0 context.Context, _a1 entity.PersonModel) (entity.PersonModel, error) {
	ret := _m.Called(_a0, _a1)

	var r0 entity.PersonModel
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.PersonModel) (entity.PersonModel, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entity.PersonModel) entity.PersonModel); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(entity.PersonModel)
	}

	if rf, ok := ret.Get(1).(func(context.Context, entity.PersonModel) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: _a0, _a1
func (_m *PersonRepository) Update(_a0 context.Context, _a1 entity.PersonModel) (entity.PersonModel, error) {
	ret := _m.Called(_a0, _a1)

	var r0 entity.PersonModel
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.PersonModel) (entity.PersonModel, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entity.PersonModel) entity.PersonModel); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(entity.PersonModel)
	}

	if rf, ok := ret.Get(1).(func(context.Context, entity.PersonModel) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewPersonRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewPersonRepository creates a new instance of PersonRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewPersonRepository(t mockConstructorTestingTNewPersonRepository) *PersonRepository {
	mock := &PersonRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
